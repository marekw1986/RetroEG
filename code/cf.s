;
; File generated by cc65 v 2.18 - Git b525554b
;
	.fopt		compiler,"cc65 v 2.18 - Git b525554b"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_cfInit
	.export		_cfReadBlocks
	.export		_cfWriteBlocks
	.export		_cfGetSizeInfo

; ---------------------------------------------------------------
; unsigned char __near__ cfInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cfInit: near

.segment	"CODE"

	lda     #$04
	sta     $6587
L0009:	lda     $6587
	and     #$80
	bne     L0009
	lda     #$E0
	sta     $6586
	lda     #$01
	sta     $6581
	lda     #$EF
	sta     $6587
L000A:	lda     $6587
	and     #$80
	bne     L000A
	lda     $6587
	ldx     #$00
	and     #$01
	beq     L000C
	lda     #$01
	rts
L000C:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ cfReadBlocks (unsigned char *buffer, unsigned long lba, unsigned char blocksToRead)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cfReadBlocks: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$05
	jsr     ldeaxysp
	sta     $6583
	ldy     #$05
	jsr     ldeaxysp
	stx     $6584
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg
	sta     $6585
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg+1
	sta     (sp)
	and     #$0F
	sta     (sp)
	ora     #$E0
	sta     (sp)
	sta     $6586
	ldy     #$01
	lda     (sp),y
	sta     $6582
L0010:	lda     $6587
	and     #$80
	bne     L0010
	lda     #$20
	sta     $6587
L0011:	lda     $6587
	and     #$80
	bne     L0011
	bra     L0013
L0008:	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     $6580
	sta     (ptr1)
	ldy     #$07
	jsr     ldaxysp
	ina
	bne     L000B
	inx
L000B:	ldy     #$06
	jsr     staxysp
L0012:	lda     $6587
	and     #$80
	bne     L0012
L0013:	lda     $6587
	and     #$08
	bne     L0008
	lda     $6587
	jsr     bnega
	ldx     #$00
	and     #$01
	beq     L0014
	txa
	bra     L0001
L0014:	ina
L0001:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ cfWriteBlocks (unsigned char *buffer, unsigned long lba, unsigned char blocksToWrite)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cfWriteBlocks: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$05
	jsr     ldeaxysp
	sta     $6583
	ldy     #$05
	jsr     ldeaxysp
	stx     $6584
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg
	sta     $6585
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg+1
	sta     (sp)
	and     #$0F
	sta     (sp)
	ora     #$E0
	sta     (sp)
	sta     $6586
	ldy     #$01
	lda     (sp),y
	sta     $6582
L0010:	lda     $6587
	and     #$80
	bne     L0010
	lda     #$30
	sta     $6587
L0011:	lda     $6587
	and     #$80
	bne     L0011
	bra     L0013
L0008:	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     $6580
	ldy     #$07
	jsr     ldaxysp
	ina
	bne     L000B
	inx
L000B:	ldy     #$06
	jsr     staxysp
L0012:	lda     $6587
	and     #$80
	bne     L0012
L0013:	lda     $6587
	and     #$08
	bne     L0008
	lda     $6587
	jsr     bnega
	ldx     #$00
	and     #$01
	beq     L0014
	txa
	bra     L0001
L0014:	ina
L0001:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ cfGetSizeInfo (unsigned long *availableBlocks, unsigned int *sizeOfBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cfGetSizeInfo: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     decsp1
	ldy     #$08
	jsr     pushwysp
	ldx     #$00
	stz     sreg
	stz     sreg+1
	txa
	tay
	jsr     steaxspidx
L001B:	lda     $6587
	and     #$80
	bne     L001B
	lda     #$EC
	sta     $6587
L001C:	lda     $6587
	and     #$80
	bne     L001C
	jmp     L001F
L001D:	lda     $6580
	sta     (sp)
	ldy     #$02
	lda     (sp),y
	bne     L0021
	dey
	lda     (sp),y
	cmp     #$78
	bne     L000B
	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jmp     L0025
L000B:	iny
L0021:	lda     (sp),y
	bne     L0022
	dey
	lda     (sp),y
	cmp     #$79
	bne     L000E
	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	ldy     sreg
	sty     sreg+1
	stx     sreg
	tax
	lda     #$00
	bra     L0025
L000E:	iny
L0022:	lda     (sp),y
	bne     L0023
	dey
	lda     (sp),y
	cmp     #$7A
	bne     L0011
	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	stx     sreg+1
	sta     sreg
	lda     #$00
	tax
	bra     L0025
L0011:	iny
L0023:	lda     (sp),y
	bne     L0024
	dey
	lda     (sp),y
	cmp     #$7B
	bne     L0014
	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	sta     sreg+1
	lda     #$00
	tax
	stz     sreg
L0025:	jsr     tosoreax
	ldy     #$00
	jsr     steaxspidx
L0014:	ldy     #$02
L0024:	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0016
	inx
L0016:	ldy     #$01
	jsr     staxysp
L001E:	lda     $6587
	and     #$80
	bne     L001E
L001F:	lda     $6587
	and     #$08
	jne     L001D
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	lda     #$02
	sta     (ptr1),y
	ldx     #$00
	tya
	jmp     incsp7

.endproc

