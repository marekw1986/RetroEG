;
; File generated by cc65 v 2.18 - Git b525554b
;
	.fopt		compiler,"cc65 v 2.18 - Git b525554b"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_mc6840_init
	.export		_millis
	.export		_uptime
	.export		_get_geiger_pulses
	.export		_set_sound_frequency
	.export		_get_fattime
	.export		_milliseconds
	.export		_uptime_value
	.export		_geiger_ind
	.export		_geiger_pulses

.segment	"DATA"

_milliseconds:
	.byte	$00
_uptime_value:
	.dword	$00000000
_geiger_ind:
	.byte	$00

.segment	"BSS"

_geiger_pulses:
	.res	120,$00

; ---------------------------------------------------------------
; void __near__ mc6840_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mc6840_init: near

.segment	"CODE"

	jsr     decsp1
	lda     #$42
	sta     $6480
	lda     #$83
	sta     $6481
	stz     $6480
	lda     #$FF
	sta     $6482
	sta     $6482+1
	ldx     #$2F
	lda     #$F8
	sta     $6484
	stx     $6484+1
	ldx     #$DF
	lda     #$B1
	sta     $6486
	stx     $6486+1
	lda     #$00
L000A:	sta     (sp)
	cmp     #$3C
	bcs     L0003
	ldx     #$00
	lda     (sp)
	asl     a
	bcc     L0007
	inx
	clc
L0007:	adc     #<(_geiger_pulses)
	sta     ptr1
	txa
	adc     #>(_geiger_pulses)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	lda     (sp)
	ina
	bra     L000A
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ millis (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_millis: near

.segment	"CODE"

	jsr     decsp1
	sei
	lda     _milliseconds
	sta     (sp)
	cli
	ldx     #$00
	lda     (sp)
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned long __near__ uptime (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_uptime: near

.segment	"CODE"

	jsr     decsp4
	sei
	lda     _uptime_value+3
	sta     sreg+1
	lda     _uptime_value+2
	sta     sreg
	ldx     _uptime_value+1
	lda     _uptime_value
	jsr     steax0sp
	cli
	jsr     ldeax0sp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ get_geiger_pulses (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_geiger_pulses: near

.segment	"CODE"

	jsr     decsp1
	jsr     push0
	sei
	ldy     #$02
L000A:	sta     (sp),y
	cmp     #$3C
	bcs     L0003
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0007
	inx
	clc
L0007:	adc     #<(_geiger_pulses)
	tay
	txa
	adc     #>(_geiger_pulses)
	tax
	tya
	jsr     ldaxi
	jsr     addeq0sp
	ldy     #$02
	lda     (sp),y
	ina
	bra     L000A
L0003:	cli
	jsr     ldax0sp
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ set_sound_frequency (unsigned int freq)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_sound_frequency: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	cmp     #$00
	bne     L0003
	lda     (sp)
	cmp     #$18
L0003:	bcc     L0001
	ldx     #$FF
	txa
	jsr     pushax
	ldx     #$42
	lda     #$0F
	sta     sreg
	stz     sreg+1
	lda     #$40
	jsr     pusheax
	ldy     #$07
	jsr     ldaxysp
	jsr     axulong
	jsr     tosdiveax
	jsr     tosulong
	jsr     tossubeax
	txa
	ldy     sreg+1
	cpy     #$80
	ldx     #$00
	jsr     push0ax
	dex
	txa
	jsr     pushax
	ldx     #$42
	lda     #$0F
	sta     sreg
	lda     #$40
	jsr     pusheax
	ldy     #$0B
	jsr     ldaxysp
	jsr     axulong
	jsr     tosdiveax
	jsr     tosulong
	jsr     tossubeax
	tax
	lda     #$00
	jsr     tosor0ax
	sta     $6484
	stx     $6484+1
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned long __near__ get_fattime (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_fattime: near

.segment	"CODE"

	ldx     #$00
	stz     sreg
	stz     sreg+1
	txa
	rts

.endproc

